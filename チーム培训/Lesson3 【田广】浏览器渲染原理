本节课：浏览器渲染过程简要说明：

1.从用户输入url 2.解析地址 3.建立连接，传递数据 4.浏览器获取数据后，介绍超文本标记语言 5.介绍浏览器的js引擎，渲染引擎
6.说一下渲染的过程（1.生成DOM 树，2.生成CSS 树 3.DOM 树和CSS 树合成渲染树 4.浏览器布局 5.重排与重绘 ）
--》捎带着说一下虚拟dom，angular，vuejs,react的渲染原理区别

资料：
思维图链接：https://www.zhixi.com/view/3bffe986 密码：2012
自己写的博客（资料）：https://blog.csdn.net/isBigBUG/article/details/120912875

课后作业（不强制）
1.自己去阅读一遍渲染过程
2.自己可以画画树

课后作业增加如下:
‘应广大顾客要求’，还是给发一个渲染的实践编程的‘小福利’啊，
尝试分别使用angular，vuejs , react这3种框架，进行实践编程，实现下面的问题：
计数器：
页面上有一个文本，显示当前用户的点击次数，有一个‘点击我’按钮对用户的点击次数进行计数
如果用户点击了x次，就显示‘当前你点击了x次’；用户未点击时显示‘当前你点击了0次’.

ref 相当于angualr里面的可观察变量
https://v3.cn.vuejs.org/api/refs-api.html#refs
在js 方法里面是count .value取值 console.log(count.value)
在页面中的html里面用{{count}}这种方式显示值

angular里面的count 只是个变量
angular用的增量更新模型，会对脏值进行检查，只要值发生了修改，就会发出指令==》组件更新
而vue
使用的虚拟DOM,会生成一个新的DOM树，对比新树和老树的区别，再.........
所以，要更新VUE的变量，就必须使用可观察的变量或者state,使用状态变化来引起页面的更新
和田哥讲的爱心的例子一样
如果数字为4，快速的变化过程中4->3->4, angular认为4还是4，就会‘偷懒’，
也是增量更新模型最直观的说明例子

响应式状态需要明确使用响应式 APIs 来创建。和从 setup() 函数中返回值一样，ref 值在模板中使用的时候会自动解包：

<script setup>
import { ref } from 'vue'

const count = ref(0)
</script>

<template>
  <button @click="count++">{{ count }}</button>
</template>

