先预习一下

http原理
https://developer.mozilla.org/zh-CN/docs/Web/HTTP

主要介绍内容
1.HTTP guide/Overview of HTTP
2.HTTP guide/HTTP Message
3.HTTP authentication
4.HTTP caching
5.HTTP redirects
6.HTTP headers
7.HTTP request methods(GET POST PUT OPTIONS PATCH)
8.HTTP response status codes(200 301 400 401 403 404 500 )

https://confluence.teamx.tokyo/pages/viewpage.action?pageId=32934424

课件位置
https://confluence.teamx.tokyo/pages/viewpage.action?pageId=32934424


辅助视频教程:
GraphQl视频教程_Express Koa结合GraphQl实现服务器端Api并且在Vue Angular React中请求GraphQl Server Api
https://www.bilibili.com/video/BV18b411B758

Node.js RESTful API
https://www.runoob.com/nodejs/nodejs-restful-api.html


RPC 和 REST还有RESTFul到底是个什么玩意？
https://cloud.tencent.com/developer/article/1687563


不好意思哈 之前的课后作业我考虑不全 描述也不清楚 现在重新发一下restful的课后作业哈

GET 可以根据contentId获取以下数据结构
content{
	contentId: "20200819163438",
	category: "5f3ce20d434857000b6dc0dd"
	subCategory: "5f3ce234434857000b6dc0df",
	longitude: 142.388441,
	latitude: 43.3453149,
	openTimeEnd: "02:00",
	phoneNumber: "167-22-3956",
	isShowInDetail: true,
	tag: ["test"],
	createdAt: "2020-08-19 08:58:44"
}
GET 可以根据以下query结构查询content结果列表(选做)
query{
	category: "123456",
	subCategory: "Aa1234",
	tag: "test",
	sort: "createdAt,DESC"
}

PUT 可以接收以下结构数据进行数据更新
content{
	contentId: "20200819163438",
	category: "5f3ce20d434857000b6dc0dd"
	subCategory: "5f3ce234434857000b6dc0df",
	longitude: 142.388441,
	latitude: 43.3453149,
	openTimeEnd: "02:00",
	phoneNumber: "167-22-3956",
	isShowInDetail: true,
	tag: ["test"],
	createdAt: "2020-08-19 08:58:44"
}

PATCH 可以接收以下结构数据进行部分数据更新(category、subCategory)
content{
	contentId: "20200819163438",
	category: "5f3ce20d434857000b6dc0dd"
	subCategory: "5f3ce234434857000b6dc0df",
}

DELETE 可以接收contentId删除指定content


可以用类似ares下面的test里面的.http文件那样的东西，用REST Client来发起request，测试一下，感受一下

body传是加密的，query传不加密且url长度有限制


import { Injectable } from '@nestjs/common';

@Injectable()
export class ContentService {
    getContentById(): Array {
      return '[{"contentId": "20200819163438",
  	            "category": "5f3ce20d434857000b6dc0dd"
  	          	"subCategory": "5f3ce234434857000b6dc0df",
  	          	"longitude": 142.388441,
  	          	"latitude": 43.3453149,
  	          	"openTimeEnd": "02:00",
  	          	"phoneNumber": "167-22-3956",
  	          	"isShowInDetail": true,
  	          	"tag": "[test]",
  	          	"createdAt": "2020-08-19 08:58:44"}
  	          	]';}
       getContentInfo(): Array {
               return '[{"contentId": "20200819163440",
  	            "category": "123456"
  	          	"subCategory": "Aa1234",
  	          	"longitude": 142.388441,
  	          	"latitude": 43.3453149,
  	          	"openTimeEnd": "02:00",
  	          	"phoneNumber": "167-22-3956",
  	          	"isShowInDetail": true,
  	          	"tag": "test",
  	          	"createdAt": "2020-08-20 08:58:44"},
                {"contentId": "20200819163439",
  	            "category": "123456"
  	          	"subCategory": "Aa1234",
  	          	"longitude": 142.388441,
  	          	"latitude": 43.3453149,
  	          	"openTimeEnd": "02:00",
  	          	"phoneNumber": "167-22-3956",
  	          	"isShowInDetail": true,
  	          	"tag": "test",
  	          	"createdAt": "2020-08-19 08:58:44"},
  	          	]';}
         

    }
       updateSomeContent(): Array {
         retunr [

    ]}
       updateContent(): Array {[

    ]}
       deleteOne(): boolean {[
       return true;
    ]}
}



import { Controller, Get, Query, Body, Put, Param, Patch,Delete } from '@nestjs/common';
import { updateContent, updateSomeContent,listSome} from './content.dto';

@Controller('content')
export class ContentController {

  constructor(private contentService:ContentService){}

  @Get()
  index(){
    return 'Content Homepage';
  }

  @Get()
  findOne(@Query('contentid') contentId: number) {
    return this.service.getContentById();
  }

  @Get()
  findSome(@Query() query: listSome,@Body() updateContent: UpdateContent) {
    return this.service.getContentInfo();
  }

  @Put()
  update(@Query('contentid') contentId: number, @Body() updateContent: UpdateContent) {
    return this.service.updateContent();
  }

  @Patch()
  updateSome(@Query('contentid') contentId: number, @Body() updateSomeContent: UpdateSomeContent) {
    return this.service.updateSomeContent();
  }

  @Delete()
  remove(@Query('contentid') contentId: number) {
    return this.service.deleteOne();
}


export class updateContent {
    contentId: number;
    category: string;
    subCategory: string;
    longitude: number;
    latitude: number;
    openTimeEnd: string;
    phoneNumber: string;
    isShowInDetail: boolean;
    tag:Array;
    createdAt: string;
  }

  export class updateSomeContent {
    contentId: number;
    category: string;
    subCategory: string;
  }

  export class listSome {
    category: string;
    subCategory: string;
    tag:Array;
    createdAt: string;
  }